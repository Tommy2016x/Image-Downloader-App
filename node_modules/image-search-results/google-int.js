'use strict';

const axios = require('axios');
const pThrottle = require('p-throttle');
const randomUserAgent = require('random-user-agent');

const Translate = require('@google-cloud/translate');
const translateClient = Translate({
  projectId: 'uber-translate'
});

const languages = require('./languages');

const decodeJSON = (string) => {
  const out = unescape(JSON.parse('"' + string + '"'));
  return out;
};

const filterGoogle = (res) => {
  const regex = /"ou":"(.*?)"/g;
  const regex2 = /imgurl=(.*?)&/g;
  const out = [];
  var m;
  while (m = regex.exec(res)) {
    out.push(decodeJSON(m[1]));
  }
  while (m = regex2.exec(res)) {
    out.push(decodeJSON(m[1]));
  }
  if (out.length < 1){
    // console.trace('NOT ENOUGH RESULTS');
  }
  return out;
};


const getPage = pThrottle(({query = 'cat', page = 0, language = 'en'}) => {
  const queryParams = {
    q  : query,
    tbm: 'isch', // image search
    ijn: page,
    tbz: 'isz:lt,islt:qsvga', // bigger than qsvga
    tbs: 'itp:photo' // type is photo
  };

  const gDomain = languages[language].google;
  const searchUrl = `https://www.${gDomain}/search`;
  console.log(`${language} - ${query} Fetching ${searchUrl}`);
  return axios.get(searchUrl, {
    params: queryParams,
    headers: {
      'User-Agent': randomUserAgent()
    }
  })
  .then((res) => {
    const urls = filterGoogle(res.data);
    return urls;
  });
}, 1, 500);

module.exports = ({ query = 'cat', count = 200 }) => {
  const languageKeys = Object.keys(languages);

  let imagesPerLanguage = Math.ceil(count / languageKeys.length);
  imagesPerLanguage = Math.min(imagesPerLanguage, 50);

  const promises = languageKeys.map((language) => {

    return translateClient.translate(query, language)
      .then((res) => {
        const nPages = Math.ceil(imagesPerLanguage / 100);
        const promises = [];

        const query = res[0];

        for (let page = 0; page < nPages; page ++){
          promises.push(getPage({ query, page, language }));
        }
        return Promise.all(promises)
          .then((pages) => {
            const pagesArray = [].slice.call(pages);
            const results = [].concat.apply([], pagesArray);

            const out = results.map((url, index) => ({
              url,
              language,
              resultIndex: index,
              source: 'google'
            }));
            return out;
          });
      });
  });

  return Promise.all(promises)
    .then((languages) => {
      const languagesArray = [].slice.call(languages);
      const results = [].concat.apply([], languagesArray);
      return results;
    });
};

'use strict';

let axios = require('axios');
let randomUserAgent = require('random-user-agent');
let pThrottle = require('p-throttle');

let decodeJSON = (string) => {
  let out = unescape(JSON.parse('"' + string + '"'));
  return out;
};

let filterGoogle = (res) => {
  let regex = /"ou":"(.*?)"/g;
  let regex2 = /imgurl=(.*?)&/g;
  let out = [];
  var m;
  while (m = regex.exec(res)) {
    out.push(decodeJSON(m[1]));
  }
  while (m = regex2.exec(res)) {
    out.push(decodeJSON(m[1]));
  }
  if (out.length < 1){
    console.trace('NOT ENOUGH RESULTS');
  }
  return out;
};

let getPage = pThrottle(({query = 'cat', page = 0}) => {
  let queryParams = {
    q: query,
    tbm: 'isch', // image search
    ijn: page,
    tbz: 'isz:lt,islt:qsvga', // bigger than qsvga
    tbs: 'itp:photo' // type is photo
  };

  return axios.get('https://www.google.com/search', {
    params: queryParams,
    headers: {
      'User-Agent': randomUserAgent()
    }
  })
  .then((res) => {
    let urls = filterGoogle(res.data);
    return urls;
  })
  .then((urls) => {
    const out = urls.map((url, index) => ({
      url,
      resultIndex: index,
      source: 'google'
    }));
    return out;
  });
}, 1, 2000);

module.exports = ({query = 'cat', count = 200}) => {
  let nPages = Math.ceil(count / 100);
  let promises = [];
  for (let page = 0; page < nPages; page ++){
    promises.push(getPage({ query, page }));
  }
  return Promise.all(promises)
    .then((pages) => {
      let pagesArray = [].slice.call(pages);
      let results = [].concat.apply([], pagesArray).slice(0, count);
      return results;
    });
};

